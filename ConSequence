"""
SpNPpnps

This tool was designed to estimate dn/ds (pn/ps) from alignments generated by EToKi align-phylo modules, and annotate the SNP sites.
BTW, it was also for Willa, in some words.
:)
"""
import argparse
import Bio.Seq
import pandas as pd
import os
from Bio import SeqIO
import gffutils
from Bio.Seq import Seq
import pyfaidx
import warnings
from Bio import BiopythonWarning

warnings.simplefilter('ignore', BiopythonWarning)

if(os.path.exists('cds.fna')):
    os.remove('cds.fna') #clean
if(os.path.exists('CDS.info')):
    os.remove('CDS.info')

parser = argparse.ArgumentParser(
    description='Use mutational file from EToKi phylo module to locate the SNP and specify the consequence of mutation.',
    add_help=False,
    usage='\nConSequence.py --gff [input .gff file of reference genome in your EToKi routine.] --fna [input .fna file of reference genome in your EToKi routine.] --mutation [input .mutation.gz from EToKi phylo]')

parser.add_argument(
    '--gff',
    metavar='[input.gff]',
    required=True,
    type=str)
parser.add_argument(
    '--fna',
    metavar='[input.fna]',
    required=True,
    type=str)
parser.add_argument(
    '--mutation',
    metavar='[Mutation file]',
    required=True,
    type=str)

args = parser.parse_args()

#index
gff = args.gff
fna = pyfaidx.Fasta(args.fna)

#print(open(gff).read())
gffdb = gffutils.create_db(
    gff,dbfn='gff.db',
    force=True,
    keep_order=True,
    merge_strategy="create_unique",
    sort_attribute_values=True,
    ) #Rename here

#gene = gffdb['cds-K594_RS0100090']

#print(gene)

#print(str(gene[0])+" "+str(gene[3])+" "+str(gene[4])+str(gene.id.replace('cds-','')))

#faa index

for i in gffdb.features_of_type('CDS', order_by='seqid'):
    #print('>'+i.id)
    g_seq = (i.sequence(fna))
    g_seq = Seq(g_seq)
    if i.strand == '-':
        g_seq = g_seq.reverse_complement()
    #g_seq = Bio.Seq.translate(g_seq,table=11) #Compare later
    #for b in range(0, len(g_seq), 60):  #60 bases per line
        #print(g_seq[b:b + 60])
    f = open('cds.fna','a')
    f.write(str('>'+i.seqid+"_"+i.id.replace('cds-',''))+'\n'+str(g_seq)+'\n')
    f.close()

#Find sites

m = pd.read_table(args.mutation,sep='\t')

m['#Mutation']=m['#Mutation'].astype(str)
m['#Site']=m['#Site'].astype(str)

m = m[m['#Mutation'].str.len() == 4]

m = m[m['#Homoplasy'] == 1]

#print(m)

#def SNPinGENE(Node,Seq,Site):

#m.to_csv('mutations.txt',sep='\t',index=False,header=None)
#m = pd.read_csv(r'mutations.txt',header=None,names=['Node','Ref_contig','Site','SNP'])

for l in gffdb.features_of_type('CDS', order_by='seqid'):
    cdsif = open('CDS.info','a')
    cdsif.write(str(l.id.replace('cds-', ''))+"\t"+str(l[0]) + "\t" + str(l[3]) + "\t" + str(l[4]) +'\n')
    cdsif.close()

cdst = pd.read_table(r'CDS.info',header=None,names=['Name','Contig' ,'start' ,'end'])
cdst.to_csv('CDS.info',sep='\t',index=False)

c=pd.read_csv('CDS.info',sep='\t')
#print(c)
cds_dict = c.set_index('Name').to_dict('dict')
#print(cds_dict['Contig'].keys())
#print((cds_dict['Contig'])['WP_024437034.1']+' '+str((cds_dict['start'])['WP_024437034.1'])+' '+str((cds_dict['end'])['WP_024437034.1']))

#def get_keys(d, value):
    #return [k for k,v in d.items() if v == value] #Fix later

#get_keys((cds_dict['Contig']),'NZ_ASES01000001.1')

#inputcontig = str('NZ_ASES01000001.1')#test of locutag and site
#inputsite = ('500')

#SHIT HILL

def gene_select(inputnode,inputcontig,inputsite,SNP):
    keycl = []
    for keyc in (cds_dict['Contig']):
        if (cds_dict['Contig'])[keyc] == inputcontig:
            keycl.append(keyc)

    keysl = []
    for keys in (cds_dict['start']):
        if int((cds_dict['start'])[keys]) <= int(inputsite):
            #print(int(inputsite)-int((cds_dict['start'])[keys]))
            keysl.append(keys)

    keyel = []
    for keye in (cds_dict['end']):
        if int((cds_dict['end'])[keye]) >= int(inputsite):
            keyel.append(keye)

    set_keycl = set(keycl)
    set_keyel = set(keyel)
    set_keysl = set(keysl)

    if (len((set_keycl & set_keyel & set_keysl))) != 0:
        for gene_candid in (set_keycl & set_keyel & set_keysl):
            gene = str(inputcontig) + '_' + str(gene_candid)
            #print('>'+gene)
            if gffdb[str(gene_candid)].strand == '+':
                SNPsite=int(inputsite)-gffdb[str(gene_candid)].start
            else:
                SNPsite=gffdb[str(gene_candid)].end-int(inputsite)
        #print(SNPsite)
            for contig in SeqIO.parse('cds.fna',"fasta"):
                if contig.id == gene:
                    if gffdb[str(gene_candid)].strand == '+':
                        #print(Bio.Seq.translate(contig.seq,table=11))
                        snp_seq = contig.seq[:int(SNPsite)]+str(SNP[3:])+ contig.seq[(int(SNPsite)+1):]
                        #print(Bio.Seq.translate(snp_seq,table=11))
                        if Bio.Seq.translate(contig.seq,table=11) == (Bio.Seq.translate(snp_seq,table=11)):
                            print(str(inputnode)+'\t'+str(inputcontig)+'\t'+str(inputsite)+'\t'+str(SNP)+'\t'+str(gene_candid)+'\t'+str(len(Bio.Seq.translate(snp_seq,table=11))) +'\t'+'Samesense mutation')
                        else:
                            print(str(inputnode)+'\t'+str(inputcontig)+'\t'+str(inputsite)+'\t'+str(SNP)+'\t'+str(gene_candid)+'\t'+str(len(Bio.Seq.translate(snp_seq,table=11))) +'\t'+'Missense mutation')
                    else:
                        #print(Bio.Seq.translate((contig.seq).reverse_complement(), table=11))
                        snp_seq = contig.seq[:int(SNPsite)] + str(SNP[3:]) + contig.seq[(int(SNPsite) + 1):]
                        #print(Bio.Seq.translate(snp_seq.reverse_complement(), table=11))
                        if Bio.Seq.translate((contig.seq).reverse_complement(), table=11) == (Bio.Seq.translate(snp_seq.reverse_complement(), table=11)):
                            print(str(inputnode) + '\t' + str(inputcontig) + '\t' + str(inputsite) + '\t' + str(SNP) +'\t'+str(gene_candid)+ '\t' +str(len(Bio.Seq.translate(snp_seq,table=11))) +'\t'+ 'Samesense mutation')
                        else:
                            print(str(inputnode) + '\t' + str(inputcontig) + '\t' + str(inputsite) + '\t' + str(SNP) +'\t'+str(gene_candid)+ '\t' +str(len(Bio.Seq.translate(snp_seq,table=11))) +'\t'+ 'Missense mutation')
    else:
        pass
        #print(str(inputnode) + '\t' + str(inputcontig) + '\t' + str(inputsite) + '\t' + str(SNP) +'\t'+'Non-coding zone')


#gene_select('NZ_ASES01000001.1','300','G->T')
for index,row in m.iterrows():
    gene_select(row['#Node'],row['#Seq'],row['#Site'],row['#Mutation'])

#print(mutate_suml)


#for index,row in m.iterrows():
    #if (cds_dict.keys(row['#Seq']) != None):
        #print(row['#Seq'])
    #else:
        #print(cds_dict['Name'])
        #if row['#Site']>=cds_dict['start'] and row['#Site']<=cds_dict['end']:
           #print(row['#Site']+'\t'+cds_dict['start']+'\t'+cds_dict['end'])

#







#os.remove("mutations.txt")
